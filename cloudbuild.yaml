substitutions:
  _REGION: 'asia-northeast1'
  _API_SERVER_SERVICE: 'api-server'
  _FRONTEND_SERVICE: 'frontend'
steps:
  # マイグレーションコンテナのビルド・プッシュ
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-migration'
    waitFor: ['-']
    args:
      [
        'build',
        '-t',
        '$_REGION-docker.pkg.dev/${PROJECT_ID}/migrations/latest',
        '-f',
        './migrations/Dockerfile',
        './migrations',
      ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-migration-image'
    waitFor: ['build-migration']
    args: ['push', '$_REGION-docker.pkg.dev/${PROJECT_ID}/migrations/latest']

  # Cloud Run Jobでマイグレーションの実行
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    id: 'apply-migration'
    waitFor: ['push-migration-image']
    args:
      - -c
      - |
        gcloud run jobs update apply-migration \
          --image ${_REGION}-docker.pkg.dev/${PROJECT_ID}/migrations/latest \
          --project ${PROJECT_ID} \
          --region ${_REGION} \
          --update-env-vars="SERVICE_ACCOUNT_EMAIL=$$SERVICE_ACCOUNT_EMAIL,MYSQL_DBNAME=$$MYSQL_DBNAME,MYSQL_USER=$$MYSQL_USER,MYSQL_PASS=$$MYSQL_PASS,MYSQL_HOST=$$MYSQL_HOST,MYSQL_PORT=$$MYSQL_PORT" \
          --service-account="$$SERVICE_ACCOUNT_EMAIL" \
          --execute-now
    secretEnv:
      [
        'SERVICE_ACCOUNT_EMAIL',
        'MYSQL_DBNAME',
        'MYSQL_USER',
        'MYSQL_PASS',
        'MYSQL_HOST',
        'MYSQL_PORT',
      ]

  # NOTE: APIコンテナのビルド・プッシュ
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        '$_REGION-docker.pkg.dev/${PROJECT_ID}/${_API_SERVER_SERVICE}/latest',
        '-f',
        './api-server/Dockerfile',
        './api-server',
      ]
    id: build-api-server
    waitFor: ['apply-migration']
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        '$_REGION-docker.pkg.dev/${PROJECT_ID}/${_API_SERVER_SERVICE}/latest',
      ]
    id: push-api-server-image
    waitFor: ['build-api-server']

  # NOTE: Cloud Run へデプロイ
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - -c
      - |
        gcloud run deploy ${_API_SERVER_SERVICE} \
          --image ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_API_SERVER_SERVICE}/latest \
          --project ${PROJECT_ID} \
          --platform managed \
          --region ${_REGION} \
          --update-env-vars="SERVICE_ACCOUNT_EMAIL=$$SERVICE_ACCOUNT_EMAIL,MYSQL_DBNAME=$$MYSQL_DBNAME,MYSQL_USER=$$MYSQL_USER,MYSQL_PASS=$$MYSQL_PASS,MYSQL_HOST=$$MYSQL_HOST,MYSQL_PORT=$$MYSQL_PORT,SERVER_PORT=$$SERVER_PORT,JWT_TOKEN_KEY=$$JWT_TOKEN_KEY,CLIENT_ORIGIN=$$CLIENT_ORIGIN,APP_ENV=$$APP_ENV,API_ORIGIN=$$API_ORIGIN" \
          --service-account="$$SERVICE_ACCOUNT_EMAIL"
    id: deploy-api-server
    waitFor: ['push-api-server-image']
    secretEnv:
      [
        'SERVICE_ACCOUNT_EMAIL',
        'MYSQL_DBNAME',
        'MYSQL_USER',
        'MYSQL_PASS',
        'MYSQL_HOST',
        'MYSQL_PORT',
        'SERVER_PORT',
        'JWT_TOKEN_KEY',
        'CLIENT_ORIGIN',
        'APP_ENV',
        'TZ',
        'API_ORIGIN',
      ]

  # Frontendのデプロイのため、環境変数を.env.productionに書き出す
  - name: gcr.io/cloud-builders/gcloud
    id: 'prepare-frontend-env'
    waitFor: ['apply-migration']
    entrypoint: bash
    args:
      - -c
      - gcloud secrets versions access latest --secret=VITE_ENV_PRODUCTION > ./frontend/.env.production

  # Frontendのビルド・プッシュ
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    waitFor: ['prepare-frontend-env']
    args:
      [
        'build',
        '-t',
        '$_REGION-docker.pkg.dev/${PROJECT_ID}/${_FRONTEND_SERVICE}/latest',
        '-f',
        './frontend/Dockerfile',
        './frontend',
      ]
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend-image'
    waitFor: ['build-frontend']
    args:
      [
        'push',
        '$_REGION-docker.pkg.dev/${PROJECT_ID}/${_FRONTEND_SERVICE}/latest',
      ]

  # FrontendをCloud Run へデプロイ
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    id: 'deploy-frontend'
    waitFor: ['push-frontend-image']
    args:
      - -c
      - |
        gcloud run deploy ${_FRONTEND_SERVICE} \
          --image ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_FRONTEND_SERVICE}/latest \
          --project ${PROJECT_ID} \
          --platform managed \
          --region ${_REGION} \
          --update-env-vars="SERVICE_ACCOUNT_EMAIL=$$SERVICE_ACCOUNT_EMAIL,TZ=$$TZ" \
          --service-account="$$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ['SERVICE_ACCOUNT_EMAIL', 'TZ']
availableSecrets:
  secretManager:
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/SERVICE_ACCOUNT_EMAIL/versions/1'
      env: SERVICE_ACCOUNT_EMAIL
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/MYSQL_DBNAME/versions/1'
      env: MYSQL_DBNAME
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/MYSQL_USER/versions/1'
      env: MYSQL_USER
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/MYSQL_PASS/versions/1'
      env: MYSQL_PASS
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/MYSQL_HOST/versions/1'
      env: MYSQL_HOST
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/MYSQL_PORT/versions/1'
      env: MYSQL_PORT
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/SERVER_PORT/versions/1'
      env: SERVER_PORT
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/JWT_TOKEN_KEY/versions/1'
      env: JWT_TOKEN_KEY
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/CLIENT_ORIGIN/versions/1'
      env: CLIENT_ORIGIN
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/APP_ENV/versions/1'
      env: APP_ENV
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/TZ/versions/1'
      env: TZ
    - versionName: 'projects/${PROJECT_NUMBER}/secrets/API_ORIGIN/versions/1'
      env: API_ORIGIN
