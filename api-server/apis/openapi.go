// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// CategoryTotalAmountLists defines model for CategoryTotalAmountLists.
type CategoryTotalAmountLists struct {
	Category    int `json:"category"`
	TotalAmount int `json:"totalAmount"`
}

// CategoryTotalAmountListsResponse defines model for CategoryTotalAmountListsResponse.
type CategoryTotalAmountListsResponse struct {
	TotalAmounts []CategoryTotalAmountLists `json:"totalAmounts"`
}

// ClientTotalAmountLists defines model for ClientTotalAmountLists.
type ClientTotalAmountLists struct {
	ClientName  string `json:"clientName"`
	TotalAmount int    `json:"totalAmount"`
}

// ClientTotalAmountListsResponse defines model for ClientTotalAmountListsResponse.
type ClientTotalAmountListsResponse struct {
	TotalAmounts []ClientTotalAmountLists `json:"totalAmounts"`
}

// CsrfResponse defines model for CsrfResponse.
type CsrfResponse struct {
	CsrfToken string `json:"csrfToken"`
}

// Expense defines model for Expense.
type Expense struct {
	Amount      int                `json:"amount"`
	Category    int                `json:"category"`
	Description string             `json:"description"`
	Id          string             `json:"id"`
	PaidAt      openapi_types.Date `json:"paidAt"`
}

// ExpenseLists defines model for ExpenseLists.
type ExpenseLists struct {
	Expenses []Expense `json:"expenses"`
}

// Income defines model for Income.
type Income struct {
	Amount     int                `json:"amount"`
	ClientName string             `json:"clientName"`
	Id         string             `json:"id"`
	ReceivedAt openapi_types.Date `json:"receivedAt"`
}

// IncomeLists defines model for IncomeLists.
type IncomeLists struct {
	Incomes []Income `json:"incomes"`
}

// StoreExpenseInput defines model for StoreExpenseInput.
type StoreExpenseInput struct {
	Amount      int                `json:"amount"`
	Category    int                `json:"category"`
	Description string             `json:"description"`
	PaidAt      openapi_types.Date `json:"paidAt"`
}

// StoreExpenseResponse defines model for StoreExpenseResponse.
type StoreExpenseResponse struct {
	Errors  StoreExpenseValidationError `json:"errors"`
	Expense Expense                     `json:"expense"`
}

// StoreExpenseValidationError defines model for StoreExpenseValidationError.
type StoreExpenseValidationError struct {
	Amount      *[]string `json:"amount,omitempty"`
	Category    *[]string `json:"category,omitempty"`
	Description *[]string `json:"description,omitempty"`
	PaidAt      *[]string `json:"paidAt,omitempty"`
}

// StoreIncomeInput defines model for StoreIncomeInput.
type StoreIncomeInput struct {
	Amount     int                `json:"amount"`
	ClientName string             `json:"clientName"`
	ReceivedAt openapi_types.Date `json:"receivedAt"`
}

// StoreIncomeResponse defines model for StoreIncomeResponse.
type StoreIncomeResponse struct {
	Errors StoreIncomeValidationError `json:"errors"`
	Income Income                     `json:"income"`
}

// StoreIncomeValidationError defines model for StoreIncomeValidationError.
type StoreIncomeValidationError struct {
	Amount     *[]string `json:"amount,omitempty"`
	ClientName *[]string `json:"clientName,omitempty"`
	ReceivedAt *[]string `json:"receivedAt,omitempty"`
}

// TotalAmountLists defines model for TotalAmountLists.
type TotalAmountLists struct {
	Date        openapi_types.Date `json:"date"`
	ExtendProps struct {
		TotalAmount int    `json:"totalAmount"`
		Type        string `json:"type"`
	} `json:"extendProps"`
}

// TotalAmountListsResponse defines model for TotalAmountListsResponse.
type TotalAmountListsResponse struct {
	TotalAmounts []TotalAmountLists `json:"totalAmounts"`
}

// UserSignInBadRequestResponse defines model for UserSignInBadRequestResponse.
type UserSignInBadRequestResponse struct {
	Errors []string `json:"errors"`
}

// UserSignInInput defines model for UserSignInInput.
type UserSignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// UserSignInOkResponse defines model for UserSignInOkResponse.
type UserSignInOkResponse = map[string]interface{}

// UserSignUpInput defines model for UserSignUpInput.
type UserSignUpInput struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// UserSignUpResponse defines model for UserSignUpResponse.
type UserSignUpResponse struct {
	Code   int                       `json:"code"`
	Errors UserSignUpValidationError `json:"errors"`
}

// UserSignUpValidationError defines model for UserSignUpValidationError.
type UserSignUpValidationError struct {
	Email    *[]string `json:"email,omitempty"`
	Name     *[]string `json:"name,omitempty"`
	Password *[]string `json:"password,omitempty"`
}

// GetExpensesParams defines parameters for GetExpenses.
type GetExpensesParams struct {
	FromDate *string `form:"fromDate,omitempty" json:"fromDate,omitempty"`
	ToDate   *string `form:"toDate,omitempty" json:"toDate,omitempty"`
}

// GetExpensesCategoryTotalAmountsParams defines parameters for GetExpensesCategoryTotalAmounts.
type GetExpensesCategoryTotalAmountsParams struct {
	FromDate string `form:"fromDate" json:"fromDate"`
	ToDate   string `form:"toDate" json:"toDate"`
}

// GetExpensesTotalAmountsParams defines parameters for GetExpensesTotalAmounts.
type GetExpensesTotalAmountsParams struct {
	FromDate string `form:"fromDate" json:"fromDate"`
	ToDate   string `form:"toDate" json:"toDate"`
}

// GetIncomesParams defines parameters for GetIncomes.
type GetIncomesParams struct {
	FromDate *string `form:"fromDate,omitempty" json:"fromDate,omitempty"`
	ToDate   *string `form:"toDate,omitempty" json:"toDate,omitempty"`
}

// GetIncomesClientTotalAmountsParams defines parameters for GetIncomesClientTotalAmounts.
type GetIncomesClientTotalAmountsParams struct {
	FromDate string `form:"fromDate" json:"fromDate"`
	ToDate   string `form:"toDate" json:"toDate"`
}

// GetIncomesTotalAmountsParams defines parameters for GetIncomesTotalAmounts.
type GetIncomesTotalAmountsParams struct {
	FromDate string `form:"fromDate" json:"fromDate"`
	ToDate   string `form:"toDate" json:"toDate"`
}

// PostExpensesJSONRequestBody defines body for PostExpenses for application/json ContentType.
type PostExpensesJSONRequestBody = StoreExpenseInput

// PostIncomesJSONRequestBody defines body for PostIncomes for application/json ContentType.
type PostIncomesJSONRequestBody = StoreIncomeInput

// PostUsersSignInJSONRequestBody defines body for PostUsersSignIn for application/json ContentType.
type PostUsersSignInJSONRequestBody = UserSignInInput

// PostUsersSignUpJSONRequestBody defines body for PostUsersSignUp for application/json ContentType.
type PostUsersSignUpJSONRequestBody = UserSignUpInput

// PostUsersValidateSignUpJSONRequestBody defines body for PostUsersValidateSignUp for application/json ContentType.
type PostUsersValidateSignUpJSONRequestBody = UserSignUpInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Csrf
	// (GET /csrf)
	GetCsrf(ctx echo.Context) error
	// Get Expenses
	// (GET /expenses)
	GetExpenses(ctx echo.Context, params GetExpensesParams) error
	// Post Expense
	// (POST /expenses)
	PostExpenses(ctx echo.Context) error
	// Get Expenses Category TotalAmounts
	// (GET /expenses/categoryTotalAmounts)
	GetExpensesCategoryTotalAmounts(ctx echo.Context, params GetExpensesCategoryTotalAmountsParams) error
	// Get Expense Total Amounts
	// (GET /expenses/totalAmounts)
	GetExpensesTotalAmounts(ctx echo.Context, params GetExpensesTotalAmountsParams) error
	// Get Incomes
	// (GET /incomes)
	GetIncomes(ctx echo.Context, params GetIncomesParams) error
	// Post Income
	// (POST /incomes)
	PostIncomes(ctx echo.Context) error
	// Get Income Client TotalAmounts
	// (GET /incomes/clientTotalAmounts)
	GetIncomesClientTotalAmounts(ctx echo.Context, params GetIncomesClientTotalAmountsParams) error
	// Get Income Total Amounts
	// (GET /incomes/totalAmounts)
	GetIncomesTotalAmounts(ctx echo.Context, params GetIncomesTotalAmountsParams) error
	// User Check Signed In
	// (GET /users/checkSignedIn)
	GetUsersCheckSignedIn(ctx echo.Context) error
	// User Sign In
	// (POST /users/signIn)
	PostUsersSignIn(ctx echo.Context) error
	// User Sign Up
	// (POST /users/signUp)
	PostUsersSignUp(ctx echo.Context) error
	// User Validate Sign Up
	// (POST /users/validateSignUp)
	PostUsersValidateSignUp(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCsrf converts echo context to params.
func (w *ServerInterfaceWrapper) GetCsrf(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCsrf(ctx)
	return err
}

// GetExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpenses(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpensesParams
	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", false, false, "fromDate", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromDate: %s", err))
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", false, false, "toDate", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpenses(ctx, params)
	return err
}

// PostExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) PostExpenses(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostExpenses(ctx)
	return err
}

// GetExpensesCategoryTotalAmounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesCategoryTotalAmounts(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpensesCategoryTotalAmountsParams
	// ------------- Required query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", false, true, "fromDate", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromDate: %s", err))
	}

	// ------------- Required query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", false, true, "toDate", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpensesCategoryTotalAmounts(ctx, params)
	return err
}

// GetExpensesTotalAmounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesTotalAmounts(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpensesTotalAmountsParams
	// ------------- Required query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", false, true, "fromDate", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromDate: %s", err))
	}

	// ------------- Required query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", false, true, "toDate", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpensesTotalAmounts(ctx, params)
	return err
}

// GetIncomes converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncomes(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIncomesParams
	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", false, false, "fromDate", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromDate: %s", err))
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", false, false, "toDate", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIncomes(ctx, params)
	return err
}

// PostIncomes converts echo context to params.
func (w *ServerInterfaceWrapper) PostIncomes(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostIncomes(ctx)
	return err
}

// GetIncomesClientTotalAmounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncomesClientTotalAmounts(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIncomesClientTotalAmountsParams
	// ------------- Required query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", false, true, "fromDate", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromDate: %s", err))
	}

	// ------------- Required query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", false, true, "toDate", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIncomesClientTotalAmounts(ctx, params)
	return err
}

// GetIncomesTotalAmounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncomesTotalAmounts(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIncomesTotalAmountsParams
	// ------------- Required query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", false, true, "fromDate", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromDate: %s", err))
	}

	// ------------- Required query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", false, true, "toDate", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIncomesTotalAmounts(ctx, params)
	return err
}

// GetUsersCheckSignedIn converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersCheckSignedIn(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersCheckSignedIn(ctx)
	return err
}

// PostUsersSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignIn(ctx)
	return err
}

// PostUsersSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignUp(ctx)
	return err
}

// PostUsersValidateSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersValidateSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersValidateSignUp(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/csrf", wrapper.GetCsrf)
	router.GET(baseURL+"/expenses", wrapper.GetExpenses)
	router.POST(baseURL+"/expenses", wrapper.PostExpenses)
	router.GET(baseURL+"/expenses/categoryTotalAmounts", wrapper.GetExpensesCategoryTotalAmounts)
	router.GET(baseURL+"/expenses/totalAmounts", wrapper.GetExpensesTotalAmounts)
	router.GET(baseURL+"/incomes", wrapper.GetIncomes)
	router.POST(baseURL+"/incomes", wrapper.PostIncomes)
	router.GET(baseURL+"/incomes/clientTotalAmounts", wrapper.GetIncomesClientTotalAmounts)
	router.GET(baseURL+"/incomes/totalAmounts", wrapper.GetIncomesTotalAmounts)
	router.GET(baseURL+"/users/checkSignedIn", wrapper.GetUsersCheckSignedIn)
	router.POST(baseURL+"/users/signIn", wrapper.PostUsersSignIn)
	router.POST(baseURL+"/users/signUp", wrapper.PostUsersSignUp)
	router.POST(baseURL+"/users/validateSignUp", wrapper.PostUsersValidateSignUp)

}

type GetCsrfRequestObject struct {
}

type GetCsrfResponseObject interface {
	VisitGetCsrfResponse(w http.ResponseWriter) error
}

type GetCsrf200JSONResponse CsrfResponse

func (response GetCsrf200JSONResponse) VisitGetCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCsrf500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response GetCsrf500JSONResponse) VisitGetCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetExpensesRequestObject struct {
	Params GetExpensesParams
}

type GetExpensesResponseObject interface {
	VisitGetExpensesResponse(w http.ResponseWriter) error
}

type GetExpenses200JSONResponse ExpenseLists

func (response GetExpenses200JSONResponse) VisitGetExpensesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostExpensesRequestObject struct {
	Body *PostExpensesJSONRequestBody
}

type PostExpensesResponseObject interface {
	VisitPostExpensesResponse(w http.ResponseWriter) error
}

type PostExpenses200JSONResponse StoreExpenseResponse

func (response PostExpenses200JSONResponse) VisitPostExpensesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostExpenses500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PostExpenses500JSONResponse) VisitPostExpensesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetExpensesCategoryTotalAmountsRequestObject struct {
	Params GetExpensesCategoryTotalAmountsParams
}

type GetExpensesCategoryTotalAmountsResponseObject interface {
	VisitGetExpensesCategoryTotalAmountsResponse(w http.ResponseWriter) error
}

type GetExpensesCategoryTotalAmounts200JSONResponse CategoryTotalAmountListsResponse

func (response GetExpensesCategoryTotalAmounts200JSONResponse) VisitGetExpensesCategoryTotalAmountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetExpensesTotalAmountsRequestObject struct {
	Params GetExpensesTotalAmountsParams
}

type GetExpensesTotalAmountsResponseObject interface {
	VisitGetExpensesTotalAmountsResponse(w http.ResponseWriter) error
}

type GetExpensesTotalAmounts200JSONResponse TotalAmountListsResponse

func (response GetExpensesTotalAmounts200JSONResponse) VisitGetExpensesTotalAmountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIncomesRequestObject struct {
	Params GetIncomesParams
}

type GetIncomesResponseObject interface {
	VisitGetIncomesResponse(w http.ResponseWriter) error
}

type GetIncomes200JSONResponse IncomeLists

func (response GetIncomes200JSONResponse) VisitGetIncomesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIncomesRequestObject struct {
	Body *PostIncomesJSONRequestBody
}

type PostIncomesResponseObject interface {
	VisitPostIncomesResponse(w http.ResponseWriter) error
}

type PostIncomes200JSONResponse StoreIncomeResponse

func (response PostIncomes200JSONResponse) VisitPostIncomesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIncomes500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PostIncomes500JSONResponse) VisitPostIncomesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIncomesClientTotalAmountsRequestObject struct {
	Params GetIncomesClientTotalAmountsParams
}

type GetIncomesClientTotalAmountsResponseObject interface {
	VisitGetIncomesClientTotalAmountsResponse(w http.ResponseWriter) error
}

type GetIncomesClientTotalAmounts200JSONResponse ClientTotalAmountListsResponse

func (response GetIncomesClientTotalAmounts200JSONResponse) VisitGetIncomesClientTotalAmountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIncomesTotalAmountsRequestObject struct {
	Params GetIncomesTotalAmountsParams
}

type GetIncomesTotalAmountsResponseObject interface {
	VisitGetIncomesTotalAmountsResponse(w http.ResponseWriter) error
}

type GetIncomesTotalAmounts200JSONResponse TotalAmountListsResponse

func (response GetIncomesTotalAmounts200JSONResponse) VisitGetIncomesTotalAmountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersCheckSignedInRequestObject struct {
}

type GetUsersCheckSignedInResponseObject interface {
	VisitGetUsersCheckSignedInResponse(w http.ResponseWriter) error
}

type GetUsersCheckSignedIn200JSONResponse struct {
	IsSignedIn bool `json:"isSignedIn"`
}

func (response GetUsersCheckSignedIn200JSONResponse) VisitGetUsersCheckSignedInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignInRequestObject struct {
	Body *PostUsersSignInJSONRequestBody
}

type PostUsersSignInResponseObject interface {
	VisitPostUsersSignInResponse(w http.ResponseWriter) error
}

type PostUsersSignIn200ResponseHeaders struct {
	SetCookie string
}

type PostUsersSignIn200JSONResponse struct {
	Body    UserSignInOkResponse
	Headers PostUsersSignIn200ResponseHeaders
}

func (response PostUsersSignIn200JSONResponse) VisitPostUsersSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUsersSignIn400JSONResponse UserSignInBadRequestResponse

func (response PostUsersSignIn400JSONResponse) VisitPostUsersSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignIn500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PostUsersSignIn500JSONResponse) VisitPostUsersSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignUpRequestObject struct {
	Body *PostUsersSignUpJSONRequestBody
}

type PostUsersSignUpResponseObject interface {
	VisitPostUsersSignUpResponse(w http.ResponseWriter) error
}

type PostUsersSignUp200JSONResponse UserSignUpResponse

func (response PostUsersSignUp200JSONResponse) VisitPostUsersSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignUp400JSONResponse UserSignUpResponse

func (response PostUsersSignUp400JSONResponse) VisitPostUsersSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignUp500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PostUsersSignUp500JSONResponse) VisitPostUsersSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersValidateSignUpRequestObject struct {
	Body *PostUsersValidateSignUpJSONRequestBody
}

type PostUsersValidateSignUpResponseObject interface {
	VisitPostUsersValidateSignUpResponse(w http.ResponseWriter) error
}

type PostUsersValidateSignUp200JSONResponse UserSignUpResponse

func (response PostUsersValidateSignUp200JSONResponse) VisitPostUsersValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersValidateSignUp400JSONResponse UserSignUpResponse

func (response PostUsersValidateSignUp400JSONResponse) VisitPostUsersValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersValidateSignUp500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PostUsersValidateSignUp500JSONResponse) VisitPostUsersValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Csrf
	// (GET /csrf)
	GetCsrf(ctx context.Context, request GetCsrfRequestObject) (GetCsrfResponseObject, error)
	// Get Expenses
	// (GET /expenses)
	GetExpenses(ctx context.Context, request GetExpensesRequestObject) (GetExpensesResponseObject, error)
	// Post Expense
	// (POST /expenses)
	PostExpenses(ctx context.Context, request PostExpensesRequestObject) (PostExpensesResponseObject, error)
	// Get Expenses Category TotalAmounts
	// (GET /expenses/categoryTotalAmounts)
	GetExpensesCategoryTotalAmounts(ctx context.Context, request GetExpensesCategoryTotalAmountsRequestObject) (GetExpensesCategoryTotalAmountsResponseObject, error)
	// Get Expense Total Amounts
	// (GET /expenses/totalAmounts)
	GetExpensesTotalAmounts(ctx context.Context, request GetExpensesTotalAmountsRequestObject) (GetExpensesTotalAmountsResponseObject, error)
	// Get Incomes
	// (GET /incomes)
	GetIncomes(ctx context.Context, request GetIncomesRequestObject) (GetIncomesResponseObject, error)
	// Post Income
	// (POST /incomes)
	PostIncomes(ctx context.Context, request PostIncomesRequestObject) (PostIncomesResponseObject, error)
	// Get Income Client TotalAmounts
	// (GET /incomes/clientTotalAmounts)
	GetIncomesClientTotalAmounts(ctx context.Context, request GetIncomesClientTotalAmountsRequestObject) (GetIncomesClientTotalAmountsResponseObject, error)
	// Get Income Total Amounts
	// (GET /incomes/totalAmounts)
	GetIncomesTotalAmounts(ctx context.Context, request GetIncomesTotalAmountsRequestObject) (GetIncomesTotalAmountsResponseObject, error)
	// User Check Signed In
	// (GET /users/checkSignedIn)
	GetUsersCheckSignedIn(ctx context.Context, request GetUsersCheckSignedInRequestObject) (GetUsersCheckSignedInResponseObject, error)
	// User Sign In
	// (POST /users/signIn)
	PostUsersSignIn(ctx context.Context, request PostUsersSignInRequestObject) (PostUsersSignInResponseObject, error)
	// User Sign Up
	// (POST /users/signUp)
	PostUsersSignUp(ctx context.Context, request PostUsersSignUpRequestObject) (PostUsersSignUpResponseObject, error)
	// User Validate Sign Up
	// (POST /users/validateSignUp)
	PostUsersValidateSignUp(ctx context.Context, request PostUsersValidateSignUpRequestObject) (PostUsersValidateSignUpResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCsrf operation middleware
func (sh *strictHandler) GetCsrf(ctx echo.Context) error {
	var request GetCsrfRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCsrf(ctx.Request().Context(), request.(GetCsrfRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCsrf")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCsrfResponseObject); ok {
		return validResponse.VisitGetCsrfResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetExpenses operation middleware
func (sh *strictHandler) GetExpenses(ctx echo.Context, params GetExpensesParams) error {
	var request GetExpensesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetExpenses(ctx.Request().Context(), request.(GetExpensesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExpenses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetExpensesResponseObject); ok {
		return validResponse.VisitGetExpensesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostExpenses operation middleware
func (sh *strictHandler) PostExpenses(ctx echo.Context) error {
	var request PostExpensesRequestObject

	var body PostExpensesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostExpenses(ctx.Request().Context(), request.(PostExpensesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostExpenses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostExpensesResponseObject); ok {
		return validResponse.VisitPostExpensesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetExpensesCategoryTotalAmounts operation middleware
func (sh *strictHandler) GetExpensesCategoryTotalAmounts(ctx echo.Context, params GetExpensesCategoryTotalAmountsParams) error {
	var request GetExpensesCategoryTotalAmountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetExpensesCategoryTotalAmounts(ctx.Request().Context(), request.(GetExpensesCategoryTotalAmountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExpensesCategoryTotalAmounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetExpensesCategoryTotalAmountsResponseObject); ok {
		return validResponse.VisitGetExpensesCategoryTotalAmountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetExpensesTotalAmounts operation middleware
func (sh *strictHandler) GetExpensesTotalAmounts(ctx echo.Context, params GetExpensesTotalAmountsParams) error {
	var request GetExpensesTotalAmountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetExpensesTotalAmounts(ctx.Request().Context(), request.(GetExpensesTotalAmountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExpensesTotalAmounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetExpensesTotalAmountsResponseObject); ok {
		return validResponse.VisitGetExpensesTotalAmountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetIncomes operation middleware
func (sh *strictHandler) GetIncomes(ctx echo.Context, params GetIncomesParams) error {
	var request GetIncomesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIncomes(ctx.Request().Context(), request.(GetIncomesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIncomes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetIncomesResponseObject); ok {
		return validResponse.VisitGetIncomesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostIncomes operation middleware
func (sh *strictHandler) PostIncomes(ctx echo.Context) error {
	var request PostIncomesRequestObject

	var body PostIncomesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostIncomes(ctx.Request().Context(), request.(PostIncomesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIncomes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostIncomesResponseObject); ok {
		return validResponse.VisitPostIncomesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetIncomesClientTotalAmounts operation middleware
func (sh *strictHandler) GetIncomesClientTotalAmounts(ctx echo.Context, params GetIncomesClientTotalAmountsParams) error {
	var request GetIncomesClientTotalAmountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIncomesClientTotalAmounts(ctx.Request().Context(), request.(GetIncomesClientTotalAmountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIncomesClientTotalAmounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetIncomesClientTotalAmountsResponseObject); ok {
		return validResponse.VisitGetIncomesClientTotalAmountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetIncomesTotalAmounts operation middleware
func (sh *strictHandler) GetIncomesTotalAmounts(ctx echo.Context, params GetIncomesTotalAmountsParams) error {
	var request GetIncomesTotalAmountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIncomesTotalAmounts(ctx.Request().Context(), request.(GetIncomesTotalAmountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIncomesTotalAmounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetIncomesTotalAmountsResponseObject); ok {
		return validResponse.VisitGetIncomesTotalAmountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersCheckSignedIn operation middleware
func (sh *strictHandler) GetUsersCheckSignedIn(ctx echo.Context) error {
	var request GetUsersCheckSignedInRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersCheckSignedIn(ctx.Request().Context(), request.(GetUsersCheckSignedInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersCheckSignedIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersCheckSignedInResponseObject); ok {
		return validResponse.VisitGetUsersCheckSignedInResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersSignIn operation middleware
func (sh *strictHandler) PostUsersSignIn(ctx echo.Context) error {
	var request PostUsersSignInRequestObject

	var body PostUsersSignInJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersSignIn(ctx.Request().Context(), request.(PostUsersSignInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersSignIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersSignInResponseObject); ok {
		return validResponse.VisitPostUsersSignInResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersSignUp operation middleware
func (sh *strictHandler) PostUsersSignUp(ctx echo.Context) error {
	var request PostUsersSignUpRequestObject

	var body PostUsersSignUpJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersSignUp(ctx.Request().Context(), request.(PostUsersSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersSignUpResponseObject); ok {
		return validResponse.VisitPostUsersSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersValidateSignUp operation middleware
func (sh *strictHandler) PostUsersValidateSignUp(ctx echo.Context) error {
	var request PostUsersValidateSignUpRequestObject

	var body PostUsersValidateSignUpJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersValidateSignUp(ctx.Request().Context(), request.(PostUsersValidateSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersValidateSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersValidateSignUpResponseObject); ok {
		return validResponse.VisitPostUsersValidateSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"d/8EAAD//99BWpfSMQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
