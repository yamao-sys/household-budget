// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AuthenticationScopes = "authentication.Scopes"
)

// Expense Expense
type Expense struct {
	Amount      int                `json:"amount"`
	Category    int                `json:"category"`
	Description string             `json:"description"`
	Id          string             `json:"id"`
	PaidAt      openapi_types.Date `json:"paidAt"`
}

// MonthlyCalenderExpense Monthly Calender Expense
type MonthlyCalenderExpense struct {
	Date        openapi_types.Date `json:"date"`
	ExtendProps struct {
		Amount int    `json:"amount"`
		Type   string `json:"type"`
	} `json:"extendProps"`
}

// StoreExpenseValidationError defines model for StoreExpenseValidationError.
type StoreExpenseValidationError struct {
	Amount      *[]string `json:"amount,omitempty"`
	Category    *[]string `json:"category,omitempty"`
	Description *[]string `json:"description,omitempty"`
	PaidAt      *[]string `json:"paidAt,omitempty"`
}

// UserSignUpValidationError defines model for UserSignUpValidationError.
type UserSignUpValidationError struct {
	Email    *[]string `json:"email,omitempty"`
	Name     *[]string `json:"name,omitempty"`
	Password *[]string `json:"password,omitempty"`
}

// CsrfResponse defines model for CsrfResponse.
type CsrfResponse struct {
	CsrfToken string `json:"csrfToken"`
}

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// MonthlyCalenderExpenseResponse defines model for MonthlyCalenderExpenseResponse.
type MonthlyCalenderExpenseResponse struct {
	Expenses *[]MonthlyCalenderExpense `json:"expenses,omitempty"`
}

// StoreExpenseResponse defines model for StoreExpenseResponse.
type StoreExpenseResponse struct {
	Errors StoreExpenseValidationError `json:"errors"`

	// Expense Expense
	Expense Expense `json:"expense"`
}

// UserSignInBadRequestResponse defines model for UserSignInBadRequestResponse.
type UserSignInBadRequestResponse struct {
	Errors []string `json:"errors"`
}

// UserSignInOkResponse defines model for UserSignInOkResponse.
type UserSignInOkResponse = map[string]interface{}

// UserSignUpResponse defines model for UserSignUpResponse.
type UserSignUpResponse struct {
	Code   int                       `json:"code"`
	Errors UserSignUpValidationError `json:"errors"`
}

// StoreExpenseInput defines model for StoreExpenseInput.
type StoreExpenseInput struct {
	Amount      int                `json:"amount"`
	Category    int                `json:"category"`
	Description string             `json:"description"`
	PaidAt      openapi_types.Date `json:"paidAt"`
}

// UserSignInInput defines model for UserSignInInput.
type UserSignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// UserSignUpInput defines model for UserSignUpInput.
type UserSignUpInput struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// GetExpensesParams defines parameters for GetExpenses.
type GetExpensesParams struct {
	// BeginningOfMonth 取得対象の月
	BeginningOfMonth *string `form:"beginningOfMonth,omitempty" json:"beginningOfMonth,omitempty"`
}

// PostExpensesJSONBody defines parameters for PostExpenses.
type PostExpensesJSONBody struct {
	Amount      int                `json:"amount"`
	Category    int                `json:"category"`
	Description string             `json:"description"`
	PaidAt      openapi_types.Date `json:"paidAt"`
}

// PostUsersSignInJSONBody defines parameters for PostUsersSignIn.
type PostUsersSignInJSONBody struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// PostUsersSignUpJSONBody defines parameters for PostUsersSignUp.
type PostUsersSignUpJSONBody struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// PostUsersValidateSignUpJSONBody defines parameters for PostUsersValidateSignUp.
type PostUsersValidateSignUpJSONBody struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// PostExpensesJSONRequestBody defines body for PostExpenses for application/json ContentType.
type PostExpensesJSONRequestBody PostExpensesJSONBody

// PostUsersSignInJSONRequestBody defines body for PostUsersSignIn for application/json ContentType.
type PostUsersSignInJSONRequestBody PostUsersSignInJSONBody

// PostUsersSignUpJSONRequestBody defines body for PostUsersSignUp for application/json ContentType.
type PostUsersSignUpJSONRequestBody PostUsersSignUpJSONBody

// PostUsersValidateSignUpJSONRequestBody defines body for PostUsersValidateSignUp for application/json ContentType.
type PostUsersValidateSignUpJSONRequestBody PostUsersValidateSignUpJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Csrf
	// (GET /csrf)
	GetCsrf(ctx echo.Context) error
	// Get Expenses
	// (GET /expenses)
	GetExpenses(ctx echo.Context, params GetExpensesParams) error
	// Post Expense
	// (POST /expenses)
	PostExpenses(ctx echo.Context) error
	// User SignIn
	// (POST /users/signIn)
	PostUsersSignIn(ctx echo.Context) error
	// User SignUp
	// (POST /users/signUp)
	PostUsersSignUp(ctx echo.Context) error
	// User Validate SignUp
	// (POST /users/validateSignUp)
	PostUsersValidateSignUp(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCsrf converts echo context to params.
func (w *ServerInterfaceWrapper) GetCsrf(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCsrf(ctx)
	return err
}

// GetExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpenses(ctx echo.Context) error {
	var err error

	ctx.Set(AuthenticationScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpensesParams
	// ------------- Optional query parameter "beginningOfMonth" -------------

	err = runtime.BindQueryParameter("form", true, false, "beginningOfMonth", ctx.QueryParams(), &params.BeginningOfMonth)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter beginningOfMonth: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpenses(ctx, params)
	return err
}

// PostExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) PostExpenses(ctx echo.Context) error {
	var err error

	ctx.Set(AuthenticationScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostExpenses(ctx)
	return err
}

// PostUsersSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignIn(ctx)
	return err
}

// PostUsersSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignUp(ctx)
	return err
}

// PostUsersValidateSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersValidateSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersValidateSignUp(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/csrf", wrapper.GetCsrf)
	router.GET(baseURL+"/expenses", wrapper.GetExpenses)
	router.POST(baseURL+"/expenses", wrapper.PostExpenses)
	router.POST(baseURL+"/users/signIn", wrapper.PostUsersSignIn)
	router.POST(baseURL+"/users/signUp", wrapper.PostUsersSignUp)
	router.POST(baseURL+"/users/validateSignUp", wrapper.PostUsersValidateSignUp)

}

type CsrfResponseJSONResponse struct {
	CsrfToken string `json:"csrfToken"`
}

type InternalServerErrorResponseJSONResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

type MonthlyCalenderExpenseResponseJSONResponse struct {
	Expenses *[]MonthlyCalenderExpense `json:"expenses,omitempty"`
}

type StoreExpenseResponseJSONResponse struct {
	Errors StoreExpenseValidationError `json:"errors"`

	// Expense Expense
	Expense Expense `json:"expense"`
}

type UserSignInBadRequestResponseJSONResponse struct {
	Errors []string `json:"errors"`
}

type UserSignInOkResponseResponseHeaders struct {
	SetCookie string
}
type UserSignInOkResponseJSONResponse struct {
	Body map[string]interface{}

	Headers UserSignInOkResponseResponseHeaders
}

type UserSignUpResponseJSONResponse struct {
	Code   int                       `json:"code"`
	Errors UserSignUpValidationError `json:"errors"`
}

type GetCsrfRequestObject struct {
}

type GetCsrfResponseObject interface {
	VisitGetCsrfResponse(w http.ResponseWriter) error
}

type GetCsrf200JSONResponse struct{ CsrfResponseJSONResponse }

func (response GetCsrf200JSONResponse) VisitGetCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCsrf500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetCsrf500JSONResponse) VisitGetCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetExpensesRequestObject struct {
	Params GetExpensesParams
}

type GetExpensesResponseObject interface {
	VisitGetExpensesResponse(w http.ResponseWriter) error
}

type GetExpenses200JSONResponse struct {
	MonthlyCalenderExpenseResponseJSONResponse
}

func (response GetExpenses200JSONResponse) VisitGetExpensesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostExpensesRequestObject struct {
	Body *PostExpensesJSONRequestBody
}

type PostExpensesResponseObject interface {
	VisitPostExpensesResponse(w http.ResponseWriter) error
}

type PostExpenses200JSONResponse struct {
	StoreExpenseResponseJSONResponse
}

func (response PostExpenses200JSONResponse) VisitPostExpensesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignInRequestObject struct {
	Body *PostUsersSignInJSONRequestBody
}

type PostUsersSignInResponseObject interface {
	VisitPostUsersSignInResponse(w http.ResponseWriter) error
}

type PostUsersSignIn200JSONResponse struct {
	UserSignInOkResponseJSONResponse
}

func (response PostUsersSignIn200JSONResponse) VisitPostUsersSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUsersSignIn400JSONResponse struct {
	UserSignInBadRequestResponseJSONResponse
}

func (response PostUsersSignIn400JSONResponse) VisitPostUsersSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignIn500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostUsersSignIn500JSONResponse) VisitPostUsersSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignUpRequestObject struct {
	Body *PostUsersSignUpJSONRequestBody
}

type PostUsersSignUpResponseObject interface {
	VisitPostUsersSignUpResponse(w http.ResponseWriter) error
}

type PostUsersSignUp200JSONResponse struct{ UserSignUpResponseJSONResponse }

func (response PostUsersSignUp200JSONResponse) VisitPostUsersSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignUp400JSONResponse struct {
	Code   int                       `json:"code"`
	Errors UserSignUpValidationError `json:"errors"`
}

func (response PostUsersSignUp400JSONResponse) VisitPostUsersSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersSignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostUsersSignUp500JSONResponse) VisitPostUsersSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersValidateSignUpRequestObject struct {
	Body *PostUsersValidateSignUpJSONRequestBody
}

type PostUsersValidateSignUpResponseObject interface {
	VisitPostUsersValidateSignUpResponse(w http.ResponseWriter) error
}

type PostUsersValidateSignUp200JSONResponse struct{ UserSignUpResponseJSONResponse }

func (response PostUsersValidateSignUp200JSONResponse) VisitPostUsersValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersValidateSignUp400JSONResponse struct {
	Code   int                       `json:"code"`
	Errors UserSignUpValidationError `json:"errors"`
}

func (response PostUsersValidateSignUp400JSONResponse) VisitPostUsersValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersValidateSignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostUsersValidateSignUp500JSONResponse) VisitPostUsersValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Csrf
	// (GET /csrf)
	GetCsrf(ctx context.Context, request GetCsrfRequestObject) (GetCsrfResponseObject, error)
	// Get Expenses
	// (GET /expenses)
	GetExpenses(ctx context.Context, request GetExpensesRequestObject) (GetExpensesResponseObject, error)
	// Post Expense
	// (POST /expenses)
	PostExpenses(ctx context.Context, request PostExpensesRequestObject) (PostExpensesResponseObject, error)
	// User SignIn
	// (POST /users/signIn)
	PostUsersSignIn(ctx context.Context, request PostUsersSignInRequestObject) (PostUsersSignInResponseObject, error)
	// User SignUp
	// (POST /users/signUp)
	PostUsersSignUp(ctx context.Context, request PostUsersSignUpRequestObject) (PostUsersSignUpResponseObject, error)
	// User Validate SignUp
	// (POST /users/validateSignUp)
	PostUsersValidateSignUp(ctx context.Context, request PostUsersValidateSignUpRequestObject) (PostUsersValidateSignUpResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCsrf operation middleware
func (sh *strictHandler) GetCsrf(ctx echo.Context) error {
	var request GetCsrfRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCsrf(ctx.Request().Context(), request.(GetCsrfRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCsrf")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCsrfResponseObject); ok {
		return validResponse.VisitGetCsrfResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetExpenses operation middleware
func (sh *strictHandler) GetExpenses(ctx echo.Context, params GetExpensesParams) error {
	var request GetExpensesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetExpenses(ctx.Request().Context(), request.(GetExpensesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExpenses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetExpensesResponseObject); ok {
		return validResponse.VisitGetExpensesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostExpenses operation middleware
func (sh *strictHandler) PostExpenses(ctx echo.Context) error {
	var request PostExpensesRequestObject

	var body PostExpensesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostExpenses(ctx.Request().Context(), request.(PostExpensesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostExpenses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostExpensesResponseObject); ok {
		return validResponse.VisitPostExpensesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersSignIn operation middleware
func (sh *strictHandler) PostUsersSignIn(ctx echo.Context) error {
	var request PostUsersSignInRequestObject

	var body PostUsersSignInJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersSignIn(ctx.Request().Context(), request.(PostUsersSignInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersSignIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersSignInResponseObject); ok {
		return validResponse.VisitPostUsersSignInResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersSignUp operation middleware
func (sh *strictHandler) PostUsersSignUp(ctx echo.Context) error {
	var request PostUsersSignUpRequestObject

	var body PostUsersSignUpJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersSignUp(ctx.Request().Context(), request.(PostUsersSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersSignUpResponseObject); ok {
		return validResponse.VisitPostUsersSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersValidateSignUp operation middleware
func (sh *strictHandler) PostUsersValidateSignUp(ctx echo.Context) error {
	var request PostUsersValidateSignUpRequestObject

	var body PostUsersValidateSignUpJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersValidateSignUp(ctx.Request().Context(), request.(PostUsersValidateSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersValidateSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersValidateSignUpResponseObject); ok {
		return validResponse.VisitPostUsersValidateSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYzY7jRBB+FavhaNYBFrTybXcVrSKEdjQhexnl0GNXkt6xu3u72wPRyAdu3LjBhQsv",
	"AOIF9mXQIB4Ddbd/2n+JnWT3xM2yq8r1fVX9VdkPKGIpZxSokih8QALeZSDVCxYTMDeWigmY/8CBSlhQ",
	"nil9M2JUATWXmPOERFgRRoO3klF9T0Y7SLG+4oJxEKqIhVOWWS+154BCRKiCLQiU+yjCCrZM7PufxiAj",
	"Qbh+i2MglSB0q59zTOLnJvKGiRQrFKIYK0B+2zT3DUQiIEbhTennl6k5eTRfuq4isdu3ECmU5+20LFVe",
	"wZVnycp9tJIglmRLF/Rc/iDFJBnAL+X3TMQ9D1uIbQzHYwwyDcGzGLwusBX/cMAoTuFMxCaEfybwFfcW",
	"mcFtokvOqLS5v5Ric13cOIOCSIrNd+wO6HFAtekYCDo/r8xYM7egCgTFyRLEPYi5EExcIn8WQ+P8Eaq+",
	"flofQOcwpyAl3sIIoDpmbT8GbQnOs+g8A8+7duB/y6jaJfuXOAEagyiO6wUYABvJXBMFqbn4VMAGheiT",
	"oJbZwAaQQX8mOscCJhYC7w0rR3EXsbwyWCVDLnRXyy8BWHN7FKX70jc4IbEJbuqicypYOxalIqctZ8V9",
	"v8xmulC7DNVa/QLH13YWXpSpqjE6gtapeQPmeHCuVtcgBlC+vjsJ3aQkqjf4aAc4BkvEEtRnLxm7I9Ab",
	"ulKEvDFoLihUXV0a1891Mp1u7pevCbUzIYoX6Tzm9eFoGs6rtv9YGxaJL7p4kRj507YvohJoIG+xOaTs",
	"XfKGtLLDpkFyHJoWMQU0vhKMy2lbr71zbA6apxVLPY3UNC+ydJNyCBxgqYfPQ8p9AOVYiWt25HivVqeO",
	"d6x7dYIKl7QdIqOHu2GVGF5+xyMpt+Ip2Ot1+QT0w3D6mlFClAmi9kutZEV7ZGoHVBUibbLQRzGyE6BE",
	"hJRZa+tEOPkG9lYpCd2w7lnesUzCjiWxd5vFW1De86uFRD6SWZpi3VkI1SjaxshH9yCkjfT5k5mmgHGg",
	"mBMUoi+f6FuaOrUzGAK9eOsL7Ro+aFNh4CxiFKJXoPSqjVqfB1/MZkMTpbILGt8QuY++GuN0aI93q4DC",
	"m7VLyCtQXpGpwltZflGgtXYK3C12COe8tNHkCJyCMkP9pl2cx59/eXz/6+Of7//96/e/f/zjn99+Qr6t",
	"+7sMjMgXZb+FLaGU0O3rjZEn5B/YCNanMHxk62/x1e3Xm3XeIdGhoSSyYm+tzxyTPfxdMekSWP9w2Q+j",
	"cP7JBN0fMvkphPR+C0ymQYNxxmcPDbqnMglCBtKsg0b/BonROiPt3ngKN+1fLScx07sd5z56Os255wPi",
	"Q59sZ+t2imHY71RixUdWYsXPqUT5b+isSjh7/9Q6NF0/DvuGsWH27+0EheXYKrxpOvxfjdHVKJk7UBYT",
	"Qoe2AywTiV4UlOJhECQswsmOSRU+mz2bIS19hX970ukB6gGNOSPmO6aYa2au5n7b2ry8x9wm1bUv5bTH",
	"pVLafJ3/FwAA///MGoxEzBcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
