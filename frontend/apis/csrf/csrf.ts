/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Household Budget Service
 * household budget
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { CsrfResponse, GetCsrf500 } from ".././model";

import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get Csrf
 */
export type getCsrfResponse200 = {
  data: CsrfResponse;
  status: 200;
};

export type getCsrfResponse500 = {
  data: GetCsrf500;
  status: 500;
};

export type getCsrfResponseComposite = getCsrfResponse200 | getCsrfResponse500;

export type getCsrfResponse = getCsrfResponseComposite & {
  headers: Headers;
};

export const getGetCsrfUrl = () => {
  return `/csrf`;
};

export const getCsrf = async (options?: RequestInit): Promise<getCsrfResponse> => {
  return customFetch<getCsrfResponse>(getGetCsrfUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetCsrfQueryKey = () => {
  return [`/csrf`] as const;
};

export const getGetCsrfQueryOptions = <TData = Awaited<ReturnType<typeof getCsrf>>, TError = GetCsrf500>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCsrf>>, TError, TData>>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCsrfQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCsrf>>> = ({ signal }) => getCsrf({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getCsrf>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetCsrfQueryResult = NonNullable<Awaited<ReturnType<typeof getCsrf>>>;
export type GetCsrfQueryError = GetCsrf500;

export function useGetCsrf<TData = Awaited<ReturnType<typeof getCsrf>>, TError = GetCsrf500>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCsrf>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getCsrf>>, TError, Awaited<ReturnType<typeof getCsrf>>>, "initialData">;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCsrf<TData = Awaited<ReturnType<typeof getCsrf>>, TError = GetCsrf500>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCsrf>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getCsrf>>, TError, Awaited<ReturnType<typeof getCsrf>>>, "initialData">;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCsrf<TData = Awaited<ReturnType<typeof getCsrf>>, TError = GetCsrf500>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCsrf>>, TError, TData>>; request?: SecondParameter<typeof customFetch> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Csrf
 */

export function useGetCsrf<TData = Awaited<ReturnType<typeof getCsrf>>, TError = GetCsrf500>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCsrf>>, TError, TData>>; request?: SecondParameter<typeof customFetch> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCsrfQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
