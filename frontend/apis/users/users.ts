/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Household Budget Service
 * household budget
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetUsersCheckSignedIn200,
  PostUsersSignIn500,
  PostUsersSignUp500,
  PostUsersValidateSignUp500,
  UserSignInBadRequestResponse,
  UserSignInInput,
  UserSignInOkResponse,
  UserSignUpInput,
  UserSignUpResponse,
} from ".././model";

import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary User Check Signed In
 */
export type getUsersCheckSignedInResponse200 = {
  data: GetUsersCheckSignedIn200;
  status: 200;
};

export type getUsersCheckSignedInResponseComposite = getUsersCheckSignedInResponse200;

export type getUsersCheckSignedInResponse = getUsersCheckSignedInResponseComposite & {
  headers: Headers;
};

export const getGetUsersCheckSignedInUrl = () => {
  return `/users/checkSignedIn`;
};

export const getUsersCheckSignedIn = async (options?: RequestInit): Promise<getUsersCheckSignedInResponse> => {
  return customFetch<getUsersCheckSignedInResponse>(getGetUsersCheckSignedInUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetUsersCheckSignedInQueryKey = () => {
  return [`/users/checkSignedIn`] as const;
};

export const getGetUsersCheckSignedInQueryOptions = <TData = Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError, TData>>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersCheckSignedInQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersCheckSignedIn>>> = ({ signal }) =>
    getUsersCheckSignedIn({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetUsersCheckSignedInQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersCheckSignedIn>>>;
export type GetUsersCheckSignedInQueryError = unknown;

export function useGetUsersCheckSignedIn<TData = Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError = unknown>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError, Awaited<ReturnType<typeof getUsersCheckSignedIn>>>,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUsersCheckSignedIn<TData = Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError, Awaited<ReturnType<typeof getUsersCheckSignedIn>>>,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUsersCheckSignedIn<TData = Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError, TData>>;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary User Check Signed In
 */

export function useGetUsersCheckSignedIn<TData = Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersCheckSignedIn>>, TError, TData>>;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetUsersCheckSignedInQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary User Sign In
 */
export type postUsersSignInResponse200 = {
  data: UserSignInOkResponse;
  status: 200;
};

export type postUsersSignInResponse400 = {
  data: UserSignInBadRequestResponse;
  status: 400;
};

export type postUsersSignInResponse500 = {
  data: PostUsersSignIn500;
  status: 500;
};

export type postUsersSignInResponseComposite = postUsersSignInResponse200 | postUsersSignInResponse400 | postUsersSignInResponse500;

export type postUsersSignInResponse = postUsersSignInResponseComposite & {
  headers: Headers;
};

export const getPostUsersSignInUrl = () => {
  return `/users/signIn`;
};

export const postUsersSignIn = async (userSignInInput: UserSignInInput, options?: RequestInit): Promise<postUsersSignInResponse> => {
  return customFetch<postUsersSignInResponse>(getPostUsersSignInUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userSignInInput),
  });
};

export const getPostUsersSignInMutationOptions = <TError = UserSignInBadRequestResponse | PostUsersSignIn500, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postUsersSignIn>>, TError, { data: UserSignInInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postUsersSignIn>>, TError, { data: UserSignInInput }, TContext> => {
  const mutationKey = ["postUsersSignIn"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersSignIn>>, { data: UserSignInInput }> = (props) => {
    const { data } = props ?? {};

    return postUsersSignIn(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersSignIn>>>;
export type PostUsersSignInMutationBody = UserSignInInput;
export type PostUsersSignInMutationError = UserSignInBadRequestResponse | PostUsersSignIn500;

/**
 * @summary User Sign In
 */
export const usePostUsersSignIn = <TError = UserSignInBadRequestResponse | PostUsersSignIn500, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postUsersSignIn>>, TError, { data: UserSignInInput }, TContext>;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof postUsersSignIn>>, TError, { data: UserSignInInput }, TContext> => {
  const mutationOptions = getPostUsersSignInMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary User Sign Up
 */
export type postUsersSignUpResponse200 = {
  data: UserSignUpResponse;
  status: 200;
};

export type postUsersSignUpResponse400 = {
  data: UserSignUpResponse;
  status: 400;
};

export type postUsersSignUpResponse500 = {
  data: PostUsersSignUp500;
  status: 500;
};

export type postUsersSignUpResponseComposite = postUsersSignUpResponse200 | postUsersSignUpResponse400 | postUsersSignUpResponse500;

export type postUsersSignUpResponse = postUsersSignUpResponseComposite & {
  headers: Headers;
};

export const getPostUsersSignUpUrl = () => {
  return `/users/signUp`;
};

export const postUsersSignUp = async (userSignUpInput: UserSignUpInput, options?: RequestInit): Promise<postUsersSignUpResponse> => {
  return customFetch<postUsersSignUpResponse>(getPostUsersSignUpUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userSignUpInput),
  });
};

export const getPostUsersSignUpMutationOptions = <TError = UserSignUpResponse | PostUsersSignUp500, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postUsersSignUp>>, TError, { data: UserSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postUsersSignUp>>, TError, { data: UserSignUpInput }, TContext> => {
  const mutationKey = ["postUsersSignUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersSignUp>>, { data: UserSignUpInput }> = (props) => {
    const { data } = props ?? {};

    return postUsersSignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersSignUp>>>;
export type PostUsersSignUpMutationBody = UserSignUpInput;
export type PostUsersSignUpMutationError = UserSignUpResponse | PostUsersSignUp500;

/**
 * @summary User Sign Up
 */
export const usePostUsersSignUp = <TError = UserSignUpResponse | PostUsersSignUp500, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postUsersSignUp>>, TError, { data: UserSignUpInput }, TContext>;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof postUsersSignUp>>, TError, { data: UserSignUpInput }, TContext> => {
  const mutationOptions = getPostUsersSignUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary User Validate Sign Up
 */
export type postUsersValidateSignUpResponse200 = {
  data: UserSignUpResponse;
  status: 200;
};

export type postUsersValidateSignUpResponse400 = {
  data: UserSignUpResponse;
  status: 400;
};

export type postUsersValidateSignUpResponse500 = {
  data: PostUsersValidateSignUp500;
  status: 500;
};

export type postUsersValidateSignUpResponseComposite =
  | postUsersValidateSignUpResponse200
  | postUsersValidateSignUpResponse400
  | postUsersValidateSignUpResponse500;

export type postUsersValidateSignUpResponse = postUsersValidateSignUpResponseComposite & {
  headers: Headers;
};

export const getPostUsersValidateSignUpUrl = () => {
  return `/users/validateSignUp`;
};

export const postUsersValidateSignUp = async (userSignUpInput: UserSignUpInput, options?: RequestInit): Promise<postUsersValidateSignUpResponse> => {
  return customFetch<postUsersValidateSignUpResponse>(getPostUsersValidateSignUpUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userSignUpInput),
  });
};

export const getPostUsersValidateSignUpMutationOptions = <TError = UserSignUpResponse | PostUsersValidateSignUp500, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postUsersValidateSignUp>>, TError, { data: UserSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postUsersValidateSignUp>>, TError, { data: UserSignUpInput }, TContext> => {
  const mutationKey = ["postUsersValidateSignUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersValidateSignUp>>, { data: UserSignUpInput }> = (props) => {
    const { data } = props ?? {};

    return postUsersValidateSignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersValidateSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersValidateSignUp>>>;
export type PostUsersValidateSignUpMutationBody = UserSignUpInput;
export type PostUsersValidateSignUpMutationError = UserSignUpResponse | PostUsersValidateSignUp500;

/**
 * @summary User Validate Sign Up
 */
export const usePostUsersValidateSignUp = <TError = UserSignUpResponse | PostUsersValidateSignUp500, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postUsersValidateSignUp>>, TError, { data: UserSignUpInput }, TContext>;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof postUsersValidateSignUp>>, TError, { data: UserSignUpInput }, TContext> => {
  const mutationOptions = getPostUsersValidateSignUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
